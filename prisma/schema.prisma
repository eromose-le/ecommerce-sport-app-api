generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native"]
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  email      String  @unique
  password   String
  phone      String
  address    String
  isVerified Boolean @default(false)

  googleId String? @unique
  avatar   String?
  bio      String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  orders     Order[]
  bookmarks  Bookmark[]
  reviews    Review[]
  CouponUser CouponUser[]

  @@map("users")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  subcategories Subcategory[]
  products      Product[]

  @@map("categories")
}

model Subcategory {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  categoryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  category Category  @relation(fields: [categoryId], references: [id])
  products Product[]

  @@map("subcategories")
}

model Size {
  id   String @id @default(uuid())
  name String @unique

  products ProductOnSize[]

  @@map("sizes")
}

model Color {
  id   String @id @default(uuid())
  name String @unique

  products ProductOnColor[]

  @@map("colors")
}

model Type {
  id   String @id @default(uuid())
  name String

  products ProductOnType[]

  @@map("types")
}

model Product {
  id            String    @id @default(uuid())
  name          String
  description   String?
  price         Float
  stock         Int?
  categoryId    String
  subcategoryId String
  specification Json?
  keyattribute  Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  category    Category         @relation(fields: [categoryId], references: [id])
  subcategory Subcategory      @relation(fields: [subcategoryId], references: [id])
  sizes       ProductOnSize[]
  colors      ProductOnColor[]
  types       ProductOnType[]
  orders      OrderItem[]
  bookmarks   Bookmark[]
  reviews     Review[]

  @@map("products")
}

model ProductOnSize {
  productId String
  sizeId    String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  size    Size    @relation(fields: [sizeId], references: [id])

  @@id([productId, sizeId])
  @@map("product_on_size")
}

model ProductOnColor {
  productId String
  colorId   String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  color   Color   @relation(fields: [colorId], references: [id])

  @@id([productId, colorId])
  @@map("product_on_color")
}

model ProductOnType {
  productId String
  typeId    String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  type    Type    @relation(fields: [typeId], references: [id])

  @@id([productId, typeId])
  @@map("product_on_type")
}

model Order {
  id        String    @id @default(uuid())
  userId    String
  total     Float
  status    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user     User        @relation(fields: [userId], references: [id])
  items    OrderItem[]
  coupon   Coupon?     @relation(fields: [couponId], references: [id])
  couponId String?

  @@map("orders")
}

model OrderItem {
  id        String    @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Bookmark {
  userId    String
  productId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([userId, productId])
  @@map("bookmarks")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int      @default(1)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // Ensure that a user can only review a product once
  @@map("reviews")
}

enum CouponType {
  PERCENTAGE
  PRODUCT_OFF
  PRICE_OFF
}

model Coupon {
  id            String       @id @default(uuid())
  code          String       @unique
  type          CouponType
  value         Float
  unitCount     Int? // Total units available for this coupon
  usedCount     Int          @default(0) // Counter for how many times the coupon has been used
  assignedUsers CouponUser[]
  global        Boolean      @default(true) // Indicates if the coupon can be used by all users
  expiration    DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  orders Order[]

  @@map("coupons")
}

model CouponUser {
  userId   String
  couponId String
  used     Boolean @default(false)
  remainingCount Int?      // For coupons with limited uses per user

  user   User   @relation(fields: [userId], references: [id])
  coupon Coupon @relation(fields: [couponId], references: [id])

  @@id([userId, couponId])
  @@map("coupon_users")
}
