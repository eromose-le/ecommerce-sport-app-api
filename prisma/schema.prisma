// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native"]
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id
  firstName  String
  lastName   String
  email      String  @unique
  password   String
  phone      String
  address    String
  isVerified Boolean @default(false)

  googleId String? @unique
  avatar   String?
  bio      String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  orders Order[]

  @@map("users")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  subcategories Subcategory[]
  products      Product[]

  @@map("categories")
}

model Subcategory {
  id          String    @id @default(uuid())
  name        String
  description String?
  categoryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  category Category  @relation(fields: [categoryId], references: [id])
  products Product[]

  @@map("subcategories")
}

model Product {
  id            String    @id @default(uuid())
  name          String
  description   String?
  price         Float
  stock         Int
  categoryId    String
  subcategoryId String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  category    Category    @relation(fields: [categoryId], references: [id])
  subcategory Subcategory @relation(fields: [subcategoryId], references: [id])
  orders      OrderItem[]

  @@map("products")
}

model Order {
  id        String    @id @default(uuid())
  userId    String
  total     Float
  status    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String    @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}
